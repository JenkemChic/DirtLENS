import cv2
import numpy as np
import sys
import time

from kivy.lang import Builder
from kivy.uix.image import Image
from kivy.clock import Clock
from kivy.graphics.texture import Texture
from kivymd.app import MDApp
from kivymd.uix.screen import MDScreen
from kivymd.uix.label import MDLabel

from gps_helper import get_current_position
from circle_color_detector import CircleColorDetector

import colors

detector_circle_radius = 95
color_detector = CircleColorDetector(colors.colors)

KV = '''
BoxLayout:
    orientation: 'vertical'
    KivyCamera:
        id: kivy_cam
'''

class KivyCamera(Image):

    def __init__(self, **kwargs):
        super(KivyCamera, self).__init__(**kwargs)
        self.capture = cv2.VideoCapture(0)
        Clock.schedule_interval(self.update, 1.0 / 30.0)
        self.color_label = MDLabel(
            font_style='H1',
            halign='center',
            theme_text_color='Custom',
            text_color=(0.15, 0.7, 0.7, 1),
            size_hint=(1, None),
            height='56dp'
        )
        self.gps_label = MDLabel(
            font_style='H4',
            halign='center',
            theme_text_color='Custom',
            text_color=(1, 1, 1, 1),
            size_hint=(1, None),
            height='40dp'
        )
        self.add_widget(self.color_label)
        self.add_widget(self.gps_label)

    def update(self, dt):
        ret, frame = self.capture.read()
        if ret:
            buf = cv2.flip(frame, 0).tostring()
            image_texture = Texture.create(size=(frame.shape[1], frame.shape[0]), colorfmt='bgr')
            image_texture.blit_buffer(buf, colorfmt='bgr', bufferfmt='ubyte')
            self.texture = image_texture

    def on_touch_down(self, touch):
        super(KivyCamera, self).on_touch_down(touch)
        self.detected_color_and_gps(touch.x, touch.y)

    def detected_color_and_gps(self, x, y):
        ret, frame = self.capture.read()
        color_name, color_rgb = color_detector.detect_color(frame, (x, y), detector_circle_radius)
        if color_name is not None:
            self.color_label.text = color_name
            lat, long = get_current_position()
            cardinal_dir = cardinal_direction(lat, long)
            self.gps_label.text = f"{cardinal_dir} Wall"

def cardinal_direction(latitude, longitude):
    if latitude > 0:
        lat_direction = 'N'
    else:
        lat_direction = 'S'

    if longitude > 0:
        long_direction = 'E'
    else:
        long_direction = 'W'

    return f"{lat_direction}{long_direction}"

class MainApp(MDApp):

    def build(self):
        screen = Builder.load_string(KV)
        return screen

if __name__ == '__main__':
    MainApp().run()
